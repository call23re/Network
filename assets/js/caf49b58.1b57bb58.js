"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[636],{48600:e=>{e.exports=JSON.parse('{"functions":[{"name":"OnClientEvent","desc":"Fires listening functions when the server fires the RemoteEvent at this client.","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Connection(...)"}],"function_type":"static","realm":["Client"],"source":{"line":40,"path":"src/lib/RemoteEvent.lua"}},{"name":"OnServerEvent","desc":"Fires listening functions when the client fires the RemoteEvent.","params":[{"name":"Player","desc":"","lua_type":"Player"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Connection(Player, ...)"}],"function_type":"static","realm":["Server"],"source":{"line":52,"path":"src/lib/RemoteEvent.lua"}},{"name":"inbound","desc":"This function is used to hook into the RemoteEvent listener. All inbound hooks are called in the order they are added.\\n\\n\\n:::tip\\nThis function can be chained.\\n```lua\\nRemoteEvent\\n\\t:inbound(Middleware.Logger, \\"Client\\")\\n\\t:inbound(Transformers.Decode, \\"Client\\")\\n```\\n:::\\n:::caution\\nThis function should only be used when you are registering your remotes!\\n:::","params":[{"name":"hook","desc":"The function to be called when the RemoteEvent receives a request.","lua_type":"function"},{"name":"context","desc":"The context in which the hook should be called.","lua_type":"\\"Shared\\" | \\"Server\\" | \\"Client\\""},{"name":"config","desc":"An optional configuration value to be passed to the hook.","lua_type":"any"}],"returns":[{"desc":"Returns self.","lua_type":"RemoteEvent"}],"function_type":"method","source":{"line":92,"path":"src/lib/RemoteEvent.lua"}},{"name":"outbound","desc":"This function is used to hook into the RemoteEvent before it fires. All outbound hooks are called in the order they are added.\\n\\n\\n:::tip\\nThis function can be chained.\\n```lua\\nRemoteEvent\\n\\t:outbound(Middleware.Logger, \\"Server\\")\\n\\t:outbound(Transformers.Encode, \\"Server\\")\\n```\\n:::\\n:::caution\\nThis function should only be used when you are registering your remotes!\\n:::","params":[{"name":"hook","desc":"The function to be called when the RemoteEvent receives a request.","lua_type":"function"},{"name":"context","desc":"The context in which the hook should be called.","lua_type":"\\"Shared\\" | \\"Server\\" | \\"Client\\""},{"name":"config","desc":"An optional configuration value to be passed to the hook.","lua_type":"any"}],"returns":[{"desc":"Returns self.","lua_type":"RemoteEvent"}],"function_type":"method","source":{"line":126,"path":"src/lib/RemoteEvent.lua"}},{"name":"warn","desc":"This function is used to set a flag that will automatically catch and warn errors thrown by hooks.\\n\\n\\n:::tip\\nThis function can be chained.\\n```lua\\nRemoteEvent\\n\\t:inbound(Middleware.Logger, \\"Shared\\")\\n\\t:inbound(Transformers.Decode, \\"Client\\")\\n\\t:outbound(Middleware.Logger, \\"Server\\")\\n\\t:outbound(Transformers.Encode, \\"Server\\")\\n\\t:warn(true)\\n```\\n:::\\n:::caution\\nThis function should only be used when you are registering your remotes!\\n:::","params":[{"name":"value","desc":"Defaults to false.","lua_type":"boolean"}],"returns":[{"desc":"Returns self.","lua_type":"RemoteEvent"}],"function_type":"method","source":{"line":160,"path":"src/lib/RemoteEvent.lua"}},{"name":"FireClient","desc":"Fires RemoteEvent.OnClientEvent for the specified player.\\n\\n\\n\\n\\t\\t","params":[{"name":"Player","desc":"The player to fire the event for.","lua_type":"Player"},{"name":"...","desc":"The arguments to pass to the event.","lua_type":"any"}],"returns":[{"desc":"Returns a promise that resolves when the event has been fired or fails if any hooks failed.","lua_type":"Promise"}],"function_type":"method","realm":["Server"],"source":{"line":231,"path":"src/lib/RemoteEvent.lua"}},{"name":"FireAllClients","desc":"Fires RemoteEvent.OnClientEvent for all players.\\n\\n\\n\\n\\t\\t","params":[{"name":"...","desc":"The arguments to pass to the event.","lua_type":"any"}],"returns":[{"desc":"Returns a promise that resolves when the event has been fired or fails if any hooks failed.","lua_type":"Promise"}],"function_type":"method","realm":["Server"],"source":{"line":258,"path":"src/lib/RemoteEvent.lua"}},{"name":"FireClients","desc":"Fires RemoteEvent.OnClientEvent for specified players.\\n\\n\\n\\n\\t\\t","params":[{"name":"List","desc":"The players to fire the event for.","lua_type":"{[number]: Player}"},{"name":"...","desc":"The arguments to pass to the event.","lua_type":"any"}],"returns":[{"desc":"Returns a promise that resolves when the event has been fired or fails if any hooks failed.","lua_type":"Promise"}],"function_type":"method","realm":["Server"],"source":{"line":286,"path":"src/lib/RemoteEvent.lua"}},{"name":"FireClientsExcept","desc":"Fires RemoteEvent.OnClientEvent for all players except those in the list.\\n\\n\\n\\n\\t\\t","params":[{"name":"List","desc":"The players not to fire the event for.","lua_type":"{[number]: Player}"},{"name":"...","desc":"The arguments to pass to the event.","lua_type":"any"}],"returns":[{"desc":"Returns a promise that resolves when the event has been fired or fails if any hooks failed.","lua_type":"Promise"}],"function_type":"method","realm":["Server"],"source":{"line":321,"path":"src/lib/RemoteEvent.lua"}},{"name":"FireServer","desc":"Fires RemoteEvent.OnServerEvent on the server using the arguments specified with an additional player argument at the beginning.\\n\\n\\n\\n\\t\\t","params":[{"name":"...","desc":"The arguments to pass to the event.","lua_type":"any"}],"returns":[{"desc":"Returns a promise that resolves when the event has been fired or fails if any hooks failed.","lua_type":"Promise"}],"function_type":"method","realm":["Client"],"source":{"line":385,"path":"src/lib/RemoteEvent.lua"}}],"properties":[{"name":"Name","desc":"Refers to the name given to the RemoteEvent.","lua_type":"string","readonly":true,"source":{"line":24,"path":"src/lib/RemoteEvent.lua"}},{"name":"ClassName","desc":"Refers to the ClassName Symbol of the RemoteEvent.","lua_type":"symbol","readonly":true,"source":{"line":30,"path":"src/lib/RemoteEvent.lua"}}],"types":[],"name":"RemoteEvent","desc":"A RemoteEvent wraps a Roblox RemoteEvent and provides ways to hook into it. It has feature parity with a regular RemoteEvent.","source":{"line":57,"path":"src/lib/RemoteEvent.lua"}}')}}]);