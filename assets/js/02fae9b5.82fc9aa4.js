"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24948:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},l=void 0,i={type:"mdx",permalink:"/Network/",source:"@site/pages/index.md",description:"Network",frontMatter:{}},c=[{value:"Network",id:"network",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Installation",id:"installation",level:2},{value:"With Wally",id:"with-wally",level:3},{value:"Usage",id:"usage",level:2}],s={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"network"},"Network"),(0,a.kt)("p",null,"Declarative networking library. Initially based on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sircfenner/network"},"network"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://call23re.github.io/Network/docs/intro"},"View Docs"))),(0,a.kt)("h2",{id:"motivation"},"Motivation"),(0,a.kt)("p",null,"Using a remote wrapper means that the source of truth for your remotes exists in your code instead of the data model. This helps keep things organized and it's easier than manually adding them in Studio or with Rojo."),(0,a.kt)("p",null,"The core API is designed to look like the default remote APIs in order to reduce friction."),(0,a.kt)("p",null,"Other advantages include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Hooks"),(0,a.kt)("li",{parentName:"ul"},"Luau Types (soon\u2122)"),(0,a.kt)("li",{parentName:"ul"},"Asynchronous Remote Functions"),(0,a.kt)("li",{parentName:"ul"},"Promisified Remotes"),(0,a.kt)("li",{parentName:"ul"},"An expanded core API (",(0,a.kt)("inlineCode",{parentName:"li"},"FireClients"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"FireClientsExcept"),")")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("h3",{id:"with-wally"},"With Wally"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nNetwork = "call23re/network@2.2.1"\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Basic Examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- ReplicatedStorage/Remotes\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Network = require(ReplicatedStorage.Packages.Network)\n\nreturn Network.Register({\n    TestEvent = Network.Event.new(),\n    TestFunction = Network.Function.new(),\n})\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- StarterPlayerScripts/Main\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Remotes = require(ReplicatedStorage.Remotes)\n\nRemotes.GetEvent("TestEvent"):FireServer(1, 2, 3)\n\nlocal TestFunction = Remotes.GetFunction("TestFunction")\n\nTestFunction:InvokeServer(1, 2, 3)\n    :andThen(function(a, b, c)\n        assert(a == 2)\n        assert(b == 3)\n        assert(c == 4)\n        print(a, b, c)\n    end)\n    :catch(warn)\n\n-- or\nlocal ok, a, b, c = TestFunction:InvokeServer(1, 2, 3):await()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- ServerScriptService/Main\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Remotes = require(ReplicatedStorage.Remotes)\n\nRemotes.GetEvent("TestEvent").OnServerEvent:Connect(function(Player, a, b, c)\n    print("Received", Player, a, b, c)\nend)\n\nRemotes.GetFunction("TestFunction").OnServerInvoke = function(Player, a, b, c)\n    return a + 1, b + 1, c + 1\nend\n')))}p.isMDXComponent=!0}}]);